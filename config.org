#+TITLE: Emacs Configuration
#+DATE: Sunday, Jan 17 2016
#+AUTHOR: rho
#+OPTIONS: num:t
#+STARTUP: overview

I've been using /emacs/ since of *2012*, and slowly config is grown
from few lines to a full repository of /tweaks/, /hacks/ and few of my
own /scripts/. This is the action I took to make config more verbose
and friendly for everyone.

* Personal Info
  #+begin_src emacs-lisp
    (setq user-full-name "rho"
          user-mail-address "rho.rhoit@gmail.com")
  #+end_src

* Emacs Server

  Stop opening *emacs* for each file. Set default open appelication
  using =emacsclient -n -a=emacs [FILE]=.

  #+begin_src emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+end_src

* Defaults
** encoding
   #+begin_src emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-language-environment 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+end_src

** default comment variable
   #+begin_src emacs-lisp
     (setq-default comment-start "# ")
   #+end_src

** backup configuration
   #+begin_src emacs-lisp
     (setq backup-directory-alist (quote ((".*" . "~/.cache/emacs_backup/"))))
     (setq make-backup-files nil)
   #+end_src

** avoid typing complete 'yes' and 'no
   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src

** recent files

   #+begin_src emacs-lisp
     ;; (recentf-mode nil)
   #+end_src

** delete selection mode
   #+begin_src emacs-lisp
     (delete-selection-mode 1)
   #+end_src

** highlight entire bracket expression
   #+begin_src emacs-lisp
     (setq show-paren-style 'expression)
     (show-paren-mode 1)
   #+end_src

** mode set
   #+begin_src emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
   #+end_src

* Programming modes
** common stuffs
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
     (setq-default py-indent-offset 4)

     (add-hook 'prog-mode-hook 'which-function-mode)
     (add-hook 'prog-mode-hook 'toggle-truncate-lines)
   #+end_src

*** trailing white-spaces

    #+begin_src emacs-lisp
      (defun nuke_traling ()
        (add-hook 'write-file-hooks 'delete-trailing-whitespace)
        (add-hook 'before-save-hooks 'whitespace-cleanup))

      (add-hook 'prog-mode-hook 'nuke_traling)
    #+end_src

** CC-mode indentation

   http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html

   #+begin_src emacs-lisp
     (setq c++-tab-always-indent t)
     (setq c-basic-offset 4)
     (setq c-indent-level 4)
     (require 'cc-mode)
     (c-set-offset 'substatement-open 0)
     (add-hook 'c-mode-common-hook '(lambda() (c-toggle-hungry-state 1)))
     (define-key c-mode-base-map (kbd "RET") 'newline-and-indent)
   #+end_src

* el-get
  https://github.com/dimitri/el-get

  #+begin_src emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/el-get")
    (require 'el-get)
    (el-get 'sync)
  #+end_src

** my packages
   To replicate a package set for another emacs installation is
   explain in el-get [[https://github.com/dimitri/el-get#replicating-a-package-set-on-another-emacs-installation][README]].

   #+begin_src emacs-lisp
     ;; `(setq my-packages ',(mapcar #'el-get-as-symbol (el-get-list-package-names-with-status "installed")))
   #+end_src

   this is the list of my current packages installed.

   #+begin_src emacs-lisp
     ;; (setq dim-packages
     ;;       (append
     ;; ;; list of packages we use straight from official recipes
     ;;          '(ample-regexps anzu auto-complete
     ;;          cl-lib ctable dash deferred ein
     ;;          epc epl ess exec-path-from-shell f
     ;;          fill-column-indicator flymake flymake-cursor fuzzy
     ;;          git-modes goto-chg highlight-symbol highline jedi
     ;;          json-mode json-reformat json-snatcher load-relative
     ;;          loc-changes lua-mode magit markdown-mode moz-repl
     ;;          multiple-cursors org-mode outorg outshine package
     ;;          pkg-info popup popup-kill-ring pos-tip powerline
     ;;          pylookup python python-environment rainbow-delimiters
     ;;          recentf-ext request s smex smooth-scroll switch-window
     ;;          tabbar undo-tree web-mode websocket
     ;;          yasnippet)
     ;;        (mapcar 'el-get-as-symbol (mapcar 'el-get-source-name el-get-sources))))

     ;; (el-get 'sync dim-packages)
   #+end_src

** [[https://github.com/rhoit/dot-emacs/blob/master/config/el-get.cfg.el][configs]]
   #+begin_src emacs-lisp
     (load "~/.emacs.d/config/el-get.cfg.el")
   #+end_src

* mode-config
** ido-mode
   Interactively Do Things

   #+begin_src emacs-lisp
     (ido-mode t)
     ;;(ido-ubiquitous t)
     (setq ido-enable-prefix nil
           ido-enable-flex-matching t ;; enable fuzzy matching
           ido-auto-merge-work-directories-length nil
           ido-create-new-buffer 'always
           ido-use-filename-at-point 'guess
           ;; ido-default-file-method 'select-window
           ido-use-virtual-buffers t
           ido-handle-duplicate-virtual-buffers 2
           ido-max-prospects 10)
   #+end_src

* Split Configs
** [[https://github.com/rhoit/dot-emacs/blob/master/config/ui.cfg.el][UI]]
   #+begin_src emacs-lisp
     (load "~/.emacs.d/config/ui.cfg.el")
   #+end_src

** Others
   #+begin_src emacs-lisp
     (load "~/.emacs.d/config/currentline.cfg.el") ;; load after theme
     (load "~/.emacs.d/config/compile.cfg.el")
     (load "~/.emacs.d/config/modeline.cfg.el")
     (load "~/.emacs.d/config/tabbar.cfg.el")
     (load "~/.emacs.d/config/org-mode.cfg.el")
     (load "~/.emacs.d/config/babel.cfg.el")
     (load "~/.emacs.d/config/html.cfg.el")
     (load "~/.emacs.d/config/python.cfg.el")
   #+end_src

* Scripts

  Some useful tiny custom features. Here is the [[https://github.com/rhoit/dot-emacs/tree/master/scripts][folder]].

** [[https://github.com/rhoit/dot-emacs/blob/master/scripts/wordplay.el][word play]]

   #+begin_src emacs-lisp
     (load "~/.emacs.d/scripts/wordplay.el")
   #+end_src

** [[https://github.com/rhoit/dot-emacs/blob/master/scripts/py-exec.el][py execution]]

   ess-style executing /python/ script.

   #+begin_src emacs-lisp
     (load "~/.emacs.d/scripts/py-exec.el")
   #+end_src

* Testing

  This section contain modes (plug-in) which modified to *extrem* or
  *buggy*. May still not be *available* in =el-get=.

  #+begin_src emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/00testing/")
  #+end_src

** window numbering
   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/00testing/window-numbering/")
     (require 'window-numbering)
     (window-numbering-mode)
   #+end_src

** highlight indentation
   other color: "#aaeeba"

   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/00testing/indent/antonj/")
     (require 'highlight-indentation)
     (set-face-background 'highlight-indentation-face "olive drab")
     (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")

     (add-hook 'prog-mode-hook 'highlight-indentation-mode)
     (add-hook 'prog-mode-hook 'highlight-indentation-current-column-mode)
   #+end_src
** hideshowvis mode

   http://www.emacswiki.org/emacs/download/hideshowvis.el

   #+begin_src emacs-lisp
     (autoload 'hideshowvis-enable "hideshowvis")
     (autoload 'hideshowvis-minor-mode
       "hideshowvis"
       "Will indicate regions foldable with hideshow in the fringe."
       'interactive)

     (add-hook 'python-mode-hook 'hideshowvis-enable)
   #+end_src

** auto-dim-buffer
   #+begin_src emacs-lisp
     (when window-system
       (add-to-list 'load-path "~/.emacs.d/00testing/auto-dim-other-buffers.el")
       (require 'auto-dim-other-buffers)
       (add-hook 'after-init-hook (lambda ()
                                    (when (fboundp 'auto-dim-other-buffers-mode)
                                      (auto-dim-other-buffers-mode t)))))
   #+end_src

** ansi-color
   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/00testing/colors")
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (toggle-read-only)
       (ansi-color-apply-on-region (point-min) (point-max))
       (toggle-read-only))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+end_src

** line number
   http://www.emacswiki.org/LineNumbers
   http://elpa.gnu.org/packages/nlinum-1.1.el

   #+begin_src emacs-lisp
     (require 'nlinum)
     (setq nlinum-delay t)
     (add-hook 'find-file-hook (lambda () (nlinum-mode 1)))
   #+end_src

** isend-mode
   #+begin_src emacs-lisp
     ;; (add-to-list 'load-path "~/.emacs.d/00testing/isend-mode/")
     ;; (require 'isend)
   #+end_src

** LFG mode
   #+begin_src emacs-lisp
     ;; (setq xle-buffer-process-coding-system 'utf-8) (load-library
     ;; "/opt/xle/emacs/lfg-mode")
   #+end_src
